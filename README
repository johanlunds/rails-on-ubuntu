
###################################################################
#
# INTRODUCTION
#
###################################################################

What follows is the steps I went through when installing Ruby on Rails on Ubuntu 8.04 Hardy Heron on a Gold VPS at the swedish hosting company GleSYS.se. The VPS has 1 GB of memory and 100 GB of disk space (see http://glesys.se/serverhotell/vps). I would like to thanks the kind folks at GleSYS for awesome support and for providing excellent hosting.

Those instructions assume familiarity with tools such as Linux, ssh, Ruby on Rails, Capistrano, Mongrel, and MySQL. They draw heavily on the excellent book "Deploying Rails Applications" by Ezra Zygmuntowicz. I strongly encourage you to check out the book if you haven't already. Like with all Pragmatic Bookshelf books, it can be conveniently downloaded as a PDF.

TODO: say something about what the technology stack looks like

mysql --version
nginx --version # compiled with fair proxy balancer
monit --version
ruby --version
gem --version

###################################################################
#
# BASIC SERVER SETUP
#
###################################################################

############################
# Change Root Password
############################

ssh root@<server-ip-number>
passwd

############################
# Install Editor (Optional)
############################

apt-get install emacs22
export EDITOR=emacs

############################
# Add the Rails Deploy User
############################

adduser deploy
# Give deploy sudo access
adduser deploy sudo
# Uncomment sudo group line
visudo

############################
# Setup ssh keys
############################

su deploy
ssh-keygen
exit
exit

# Locally - add your server to .ssh/config
Host = <name-of-your-server>
Hostname = <server-ip-number-or-domain>
User = deploy

# Convenient function for adding ssh keys, you can add it to your ~/.bashrc
function authme {
    ssh $1 'cat >>.ssh/authorized_keys' <~/.ssh/id_rsa.pub
}
source ~/.bashrc

authme <name-of-your-server>
# You should now be able to login without password
ssh <name-of-your-server>

############################
# Upgrade packages
############################

# Check out which apt-get sources you are dealing with
cat /etc/apt/sources.list
# You might want to add hardy-security so that the file becomes:
# deb http://archive.ubuntu.com/ubuntu/ hardy main restricted universe
# deb http://archive.ubuntu.com/ubuntu/ hardy-updates main restricted universe
# deb http://security.ubuntu.com/ubuntu hardy-security main restricted universe

# Update
sudo apt-get update
sudo apt-get upgrade

############################
# Install essential tools
############################

sudo apt-get install build-essential man

############################
# Install Git
############################

sudo apt-get install git-core

############################
# Setup deploy User Environment
############################

cd
git clone git://github.com/peter/rails-on-ubuntu.git
mv .bashrc .bashrc.orig
ln -s rails-on-ubuntu/.bashrc
source ~/.bashrc
ln -s rails-on-ubuntu/.emacs

############################
# Set the Timezone and Keep the Time Synced
############################

sudo dpkg-reconfigure tzdata
# Check time is correct
date
sudo apt-get install ntp

############################
# Set the hostname
############################

sudo hostname your-hostname
sudo emacs /etc/hostname
sudo emacs /etc/hosts
# Check hostname is correct
hostname

############################
# Change ssh to run on non-standard port
############################

# Choose some unused port number (not 80 or 443) between 1024 and below 65537
# Make sure to make a note of the number.
sudo emacs /etc/ssh/sshd_config
sudo /etc/init.d/ssh restart
exit
# Add to the section for your server in ~/.ssh/config:
# Port = <your-port-number>
ssh <name-of-your-server>

############################
# Configure a firewall that only allows incoming http, https, and ssh traffic
# (remembering that ssh port was changed)
############################

sudo apt-get install iptables
sudo mkdir /usr/local/scripts
sudo cp ~/rails-on-ubuntu/fw /usr/local/scripts
# Edit the firewall config and change <your-ssh-port> to reflect your ssh port
sudo emacs /usr/local/scripts/fw
sudo /sbin/iptables-restore < /usr/local/scripts/fw
# Test the firewall
exit
telnet <ip-of-your-server> <standard-ssh-port>
telnet <ip-of-your-server> <your-ssh-port>
ssh <name-of-your-server>

###################################################################
#
# RUBY ON RAILS STACK
#
###################################################################

# Install Ruby
sudo apt-get install ruby-full
# Check that Ruby is there
which ruby
#=> /usr/bin/ruby
ruby -v
#=> ruby 1.8.6 (2007-09-24 patchlevel 111) [i486-linux]
ruby -ropenssl -rzlib -rreadline -e "puts :success"
#=> success

# Install RubyGems
cd /usr/local/src
# Get latest stable recommended release of RubyGems from rubygems.org
sudo wget http://rubyforge.org/frs/download.php/38646/rubygems-1.2.0.tgz
sudo tar xzf rubygems-1.2.0.tgz
cd rubygems-1.2.0
sudo ruby setup.rb
sudo ln -s /usr/bin/gem1.8 /usr/bin/gem
which gem
#=> /usr/bin/gem
gem --version
#=> 1.2.0

# Install MySQL
sudo aptitude install mysql-server mysql-client libmysqlclient15-dev
# Check mysql is there
which mysql
#=> /usr/bin/mysql
mysql --version
#=> mysql  Ver 14.12 Distrib 5.0.51a, for debian-linux-gnu (i486) using readline 5.2
mysql
show databases;
exit

# Install MySQL C Driver for Ruby
sudo apt-get install make
sudo gem install mysql

# Install a few gems used in Rails deployment
sudo gem install rake rails capistrano mongrel_cluster

# Install Subversion (not everyone uses Git, yet)
sudo apt-get install subversion subversion-tools

# Install Nginx with Fair Proxy Balancer
sudo apt-get install libpcre3-dev libpcre3 openssl libssl-dev
cd /usr/local/src
sudo wget http://sysoev.ru/nginx/nginx-0.6.31.tar.gz
sudo tar xzvf nginx-0.6.31.tar.gz
sudo cp -r ~/rails-on-ubuntu/nginx-upstream-fair .
# If you want to live on the edge and get the latest nginx-upstream-fair, then use:
# sudo git clone git://github.com/gnosek/nginx-upstream-fair.git
cd nginx-0.6.31
sudo ./configure --with-http_ssl_module --add-module=/usr/local/src/nginx-upstream-fair
sudo make
sudo make install
which nginx
#=> /usr/local/nginx/sbin/nginx


... TO BE CONTINUED ...
